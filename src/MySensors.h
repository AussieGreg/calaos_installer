/******************************************************************************
 **  Copyright (c) 2006-2017, Calaos. All Rights Reserved.
 **
 **  This file is part of Calaos.
 **
 **  Calaos is free software; you can redistribute it and/or modify
 **  it under the terms of the GNU General Public License as published by
 **  the Free Software Foundation; either version 3 of the License, or
 **  (at your option) any later version.
 **
 **  Calaos is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
 **
 **  You should have received a copy of the GNU General Public License
 **  along with Foobar; if not, write to the Free Software
 **  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 **
 ******************************************************************************/
#ifndef MYSENSORS_H
#define MYSENSORS_H

#include <string>

namespace MySensors
{

/*
 * This header is extracted from MySensors
 */

/// @brief The command field (message-type) defines the overall properties of a message
typedef enum {
   C_PRESENTATION         = 0,   //!< Sent by a node when they present attached sensors. This is usually done in presentation() at startup.
   C_SET               = 1,   //!< This message is sent from or to a sensor when a sensor value should be updated.
   C_REQ               = 2,   //!< Requests a variable value (usually from an actuator destined for controller).
   C_INTERNAL            = 3,   //!< Internal MySensors messages (also include common messages provided/generated by the library).
   C_STREAM            = 4      //!< For firmware and other larger chunks of data that need to be divided into pieces.
} mysensor_command;

/// @brief Type of sensor (used when presenting sensors)
typedef enum {
   S_DOOR               = 0,   //!< Door sensor, V_TRIPPED, V_ARMED
   S_MOTION            = 1,   //!< Motion sensor, V_TRIPPED, V_ARMED
   S_SMOKE               = 2,   //!< Smoke sensor, V_TRIPPED, V_ARMED
   S_LIGHT               = 3,   //!< \deprecated Same as S_BINARY
   S_DIMMER            = 4,   //!< Dimmable light or fan device, V_STATUS (on/off), V_PERCENTAGE (dimmer level 0-100), V_WATT
   S_COVER               = 5,   //!< Blinds or window cover, V_UP, V_DOWN, V_STOP, V_PERCENTAGE (open/close to a percentage)
   S_TEMP               = 6,   //!< Temperature sensor, V_TEMP
   S_HUM               = 7,   //!< Humidity sensor, V_HUM
   S_BARO               = 8,   //!< Barometer sensor, V_PRESSURE, V_FORECAST
   S_WIND               = 9,   //!< Wind sensor, V_WIND, V_GUST
   S_RAIN               = 10,   //!< Rain sensor, V_RAIN, V_RAINRATE
   S_UV               = 11,   //!< Uv sensor, V_UV
   S_WEIGHT            = 12,   //!< Personal scale sensor, V_WEIGHT, V_IMPEDANCE
   S_POWER               = 13,   //!< Power meter, V_WATT, V_KWH, V_VAR, V_VA, V_POWER_FACTOR
   S_HEATER            = 14,   //!< Header device, V_HVAC_SETPOINT_HEAT, V_HVAC_FLOW_STATE, V_TEMP
   S_DISTANCE            = 15,   //!< Distance sensor, V_DISTANCE
   S_LIGHT_LEVEL         = 16,   //!< Light level sensor, V_LIGHT_LEVEL (uncalibrated in percentage),  V_LEVEL (light level in lux)
   S_ARDUINO_NODE         = 17,   //!< Used (internally) for presenting a non-repeating Arduino node
   S_ARDUINO_REPEATER_NODE   = 18,   //!< Used (internally) for presenting a repeating Arduino node
   S_LOCK               = 19,   //!< Lock device, V_LOCK_STATUS
   S_IR               = 20,   //!< IR device, V_IR_SEND, V_IR_RECEIVE
   S_WATER               = 21,   //!< Water meter, V_FLOW, V_VOLUME
   S_AIR_QUALITY         = 22,   //!< Air quality sensor, V_LEVEL
   S_CUSTOM            = 23,   //!< Custom sensor
   S_DUST               = 24,   //!< Dust sensor, V_LEVEL
   S_SCENE_CONTROLLER      = 25,   //!< Scene controller device, V_SCENE_ON, V_SCENE_OFF.
   S_RGB_LIGHT            = 26,   //!< RGB light. Send color component data using V_RGB. Also supports V_WATT
   S_RGBW_LIGHT         = 27,   //!< RGB light with an additional White component. Send data using V_RGBW. Also supports V_WATT
   S_COLOR_SENSOR         = 28,   //!< Color sensor, send color information using V_RGB
   S_HVAC               = 29,   //!< Thermostat/HVAC device. V_HVAC_SETPOINT_HEAT, V_HVAC_SETPOINT_COLD, V_HVAC_FLOW_STATE, V_HVAC_FLOW_MODE, V_TEMP
   S_MULTIMETER         = 30,   //!< Multimeter device, V_VOLTAGE, V_CURRENT, V_IMPEDANCE
   S_SPRINKLER            = 31,   //!< Sprinkler, V_STATUS (turn on/off), V_TRIPPED (if fire detecting device)
   S_WATER_LEAK         = 32,   //!< Water leak sensor, V_TRIPPED, V_ARMED
   S_SOUND               = 33,   //!< Sound sensor, V_TRIPPED, V_ARMED, V_LEVEL (sound level in dB)
   S_VIBRATION            = 34,   //!< Vibration sensor, V_TRIPPED, V_ARMED, V_LEVEL (vibration in Hz)
   S_MOISTURE            = 35,   //!< Moisture sensor, V_TRIPPED, V_ARMED, V_LEVEL (water content or moisture in percentage?)
   S_INFO               = 36,   //!< LCD text device / Simple information device on controller, V_TEXT
   S_GAS               = 37,   //!< Gas meter, V_FLOW, V_VOLUME
   S_GPS               = 38,   //!< GPS Sensor, V_POSITION
   S_WATER_QUALITY         = 39   //!< V_TEMP, V_PH, V_ORP, V_EC, V_STATUS
} mysensor_sensor;

/// @brief Type of internal messages (for internal messages)
typedef enum {
   I_BATTERY_LEVEL            = 0,   //!< Battery level
   I_TIME                  = 1,   //!< Time (request/response)
   I_VERSION               = 2,   //!< Version
   I_ID_REQUEST            = 3,   //!< ID request
   I_ID_RESPONSE            = 4,   //!< ID response
   I_INCLUSION_MODE         = 5,   //!< Inclusion mode
   I_CONFIG               = 6,   //!< Config (request/response)
   I_FIND_PARENT_REQUEST      = 7,   //!< Find parent
   I_FIND_PARENT_RESPONSE      = 8,   //!< Find parent response
   I_LOG_MESSAGE            = 9,   //!< Log message
   I_CHILDREN               = 10,   //!< Children
   I_SKETCH_NAME            = 11,   //!< Sketch name
   I_SKETCH_VERSION         = 12,   //!< Sketch version
   I_REBOOT               = 13,   //!< Reboot request
   I_GATEWAY_READY            = 14,   //!< Gateway ready
   I_SIGNING_PRESENTATION      = 15,   //!< Provides signing related preferences (first byte is preference version)
   I_NONCE_REQUEST            = 16,   //!< Request for a nonce
   I_NONCE_RESPONSE         = 17,   //!< Payload is nonce data
   I_HEARTBEAT_REQUEST         = 18,   //!< Heartbeat request
   I_PRESENTATION            = 19,   //!< Presentation message
   I_DISCOVER_REQUEST         = 20,   //!< Discover request
   I_DISCOVER_RESPONSE         = 21,   //!< Discover response
   I_HEARTBEAT_RESPONSE      = 22,   //!< Heartbeat response
   I_LOCKED               = 23,   //!< Node is locked (reason in string-payload)
   I_PING                  = 24,   //!< Ping sent to node, payload incremental hop counter
   I_PONG                  = 25,   //!< In return to ping, sent back to sender, payload incremental hop counter
   I_REGISTRATION_REQUEST      = 26,   //!< Register request to GW
   I_REGISTRATION_RESPONSE      = 27,   //!< Register response from GW
   I_DEBUG                  = 28,   //!< Debug message
   I_SIGNAL_REPORT_REQUEST      = 29,   //!< Device signal strength request
   I_SIGNAL_REPORT_REVERSE      = 30,   //!< Internal
   I_SIGNAL_REPORT_RESPONSE   = 31,   //!< Device signal strength response (RSSI)
   I_PRE_SLEEP_NOTIFICATION   = 32,   //!< Message sent before node is going to sleep
   I_POST_SLEEP_NOTIFICATION   = 33   //!< Message sent after node woke up (if enabled)
} mysensor_internal;

std::string getSensorString(int s);

}
#endif
